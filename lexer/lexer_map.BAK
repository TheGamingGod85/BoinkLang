// lexer/lexer_map.go

package lexer

import "BoinkLang/token"

type Lexer struct {
	input        string
	position     int
	readPosition int
	ch           byte
}

func New(input string) *Lexer {
	l := &Lexer{input: input}
	l.readChar()
	return l
}

func (l *Lexer) readChar() {
	if l.readPosition >= len(l.input) {
		l.ch = 0
	} else {
		l.ch = l.input[l.readPosition]
	}
	l.position = l.readPosition
	l.readPosition += 1
}

func (l *Lexer) NextToken() token.Token {
	var tok token.Token

	l.skipWhitespace()

	tokenMap := map[byte]token.TokenType{
		'=': token.ASSIGN, '+': token.PLUS, '-': token.MINUS, '!': token.BANG,
		'/': token.SLASH, '*': token.ASTERISK, '<': token.LT, '>': token.GT,
		';': token.SEMICOLON, ',': token.COMMA, '(': token.LPAREN, ')': token.RPAREN,
		'{': token.LBRACE, '}': token.RBRACE,
	}
	
	twoCharTokens := map[byte]token.TokenType{
		'=': token.EQ, '!': token.NOT_EQ,
	}
	
	if tokType, ok := twoCharTokens[l.ch]; ok && l.peekChar() == '=' {
		ch := l.ch
		l.readChar()
		tok = token.Token{Type: tokType, Literal: string(ch) + string(l.ch)}
	} else if tokType, ok := tokenMap[l.ch]; ok {
		tok = newToken(tokType, l.ch)
	} else if l.ch == 0 {
		tok = token.Token{Type: token.EOF, Literal: ""}
	} else if isLetter(l.ch) {
		tok.Literal = l.readIdentifier()
		tok.Type = token.LookupIdent(tok.Literal)
		return tok
	} else if isDigit(l.ch) {
		tok.Type = token.INT
		tok.Literal = l.readNumber()
		return tok
	} else {
		tok = newToken(token.ILLEGAL, l.ch)
	}
	l.readChar()
	return tok
}

func newToken(tokenType token.TokenType, ch byte) token.Token {
	return token.Token{Type: tokenType, Literal: string(ch)}
}

func (l *Lexer) readIdentifier() string {
	position := l.position
	for isLetter(l.ch) {
		l.readChar()
	}
	return l.input[position:l.position]
}

func isLetter(ch byte) bool {
	return 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' || ch == '_'
}

func (l *Lexer) skipWhitespace() {
	for l.ch == ' ' || l.ch == '\t' || l.ch == '\n' || l.ch == '\r' {
		l.readChar()
	}
}

func (l *Lexer) readNumber() string {
	position := l.position
	for isDigit(l.ch) {
		l.readChar()
	}
	return l.input[position:l.position]
}

func isDigit(ch byte) bool {
	return '0' <= ch && ch <= '9'
}

func (l *Lexer) peekChar() byte {
	if l.readPosition >= len(l.input) {
		return 0
	} else {
		return l.input[l.readPosition]
	}
}
